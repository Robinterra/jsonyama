namespace "System.Text"
{
    using "System";
    using "System.Reflection";

    public static class JsonSerializer
    {

        public static object? DeSerialize(RefString source, TypeInfo type)
        {

            JsonTokenizer tokenizer = JsonTokenizer.Initilize(source);
            if (!tokenizer.NextToken()) return null;

            object result = JsonSerializer.DeSerialize_Object(tokenizer, type);

            return result;
        }

        private static object? DeSerialize_Object(JsonTokenizer tokenizer, TypeInfo type)
        {
            if (tokenizer.TokenKind == JsonTokenKind.Null) return null;
            if (tokenizer.TokenKind != JsonTokenKind.OpenBracket) return null;

            object result = type.GetNewInstance();

            while (tokenizer.NextToken())
            {
                if (tokenizer.TokenKind == JsonTokenKind.Comma) continue;
                if (tokenizer.TokenKind == JsonTokenKind.CloseBracket) return result;
                if (tokenizer.TokenKind != JsonTokenKind.Text) return null;

                JsonSerializer.DeSerialize_Property(tokenizer, result, type);
            }

            return result;
        }

        private static object? DeSerialize_List(JsonTokenizer tokenizer, TypeInfo type)
        {
            if (tokenizer.TokenKind == JsonTokenKind.Null) return null;
            if (tokenizer.TokenKind != JsonTokenKind.OpenSquareBracket) return null;

            List<object> result = new List<object>();

            while (tokenizer.NextToken())
            {
                if (tokenizer.TokenKind == JsonTokenKind.Comma) continue;
                if (tokenizer.TokenKind == JsonTokenKind.CloseSquareBracket) return result;

                object item = JsonSerializer.DeSerialize_Object(tokenizer, type);

                result.Add(item);
            }

            return result;
        }

        private static bool IsValueCorrectType(int propType, int tokenKind)
        {
            if (propType == TypeArten.Int) return tokenKind == JsonTokenKind.Number;
            if (propType == TypeArten.String) return tokenKind == JsonTokenKind.Text;
            if (propType == TypeArten.Object) return tokenKind == JsonTokenKind.OpenBracket;
            if (propType == TypeArten.Bool)
            {
                if (tokenKind == JsonTokenKind.False) return true;
                return tokenKind == JsonTokenKind.True;
            }
            if (propType == TypeArten.List) return tokenKind == JsonTokenKind.OpenSquareBracket;

            return false;
        }

        private static bool DeSerialize_Property(JsonTokenizer tokenizer, &object instance, TypeInfo type)
        {
            if (tokenizer.TokenKind != JsonTokenKind.Text) return false;

            RefString propName = tokenizer.GetCurrentTextToken();

            PropertyInfo propInfo = type.Find(propName);
            if (propInfo is null) return true;

            if (!tokenizer.NextToken()) return false;
            if (tokenizer.TokenKind != JsonTokenKind.AssigmentOperator) return false;
            if (!tokenizer.NextToken()) return false;

            bool isok = JsonSerializer.IsValueCorrectType(propInfo.TypeArt, tokenizer.TokenKind);
            if (!isok) return false;

            int propType = propInfo.TypeArt;
            RefString inputToken = tokenizer.GetCurrent();

            if (propType == TypeArten.Object)
            {
                int data = (JsonSerializer.DeSerialize_Object(tokenizer, propInfo.Type)) as int;
                return propInfo.SetValue(instance, data);
            }

            if (propType == TypeArten.List)
            {
                int data = (JsonSerializer.DeSerialize_List(tokenizer, propInfo.Type)) as int;
                return propInfo.SetValue(instance, data);
            }

            if (propType == TypeArten.Int) return JsonSerializer.SetPropertyWithInt(instance, inputToken, propInfo);
            if (propType == TypeArten.Bool)
            {
                if (tokenizer.TokenKind == JsonTokenKind.True) return propInfo.SetValue(instance, true as int);
                if (tokenizer.TokenKind == JsonTokenKind.False) return propInfo.SetValue(instance, false as int);
            }

            if (propType == TypeArten.String) return JsonSerializer.SetPropertyWithString(instance, inputToken, propInfo);

            return false;
        }

        private static bool SetPropertyWithInt(&object instance, RefString inputZahl, PropertyInfo propInfo)
        {
            IntParseResult parseResult = int.Parse(inputZahl);
            if (!parseResult.IsSuccess) return false;

            propInfo.SetValue(instance, parseResult.Result);

            return true;
        }

        private static bool SetPropertyWithString(&object instance, RefString inputText, PropertyInfo propInfo)
        {
            int dataResult = (JsonTokenizer.GetEscapedText(inputText)) as int;

            propInfo.SetValue(instance, dataResult as int);

            return true;
        }

    }

    public struct JsonTokenizer
    {

        #region vars

        public int Start;
        public int Length;
        public int TokenLength;
        public string Source;

        public int TokenKind;

        #endregion vars

        public static JsonTokenizer Initilize(RefString source)
        {
            Result.Source = source.Source;
            Result.Start = source.Start;
            Result.Length = source.Length;
            Result.TokenLength = 0;
            Result.TokenKind = JsonTokenKind.None;

            return Result;
        }

        public bool NextToken()
        {
            int start = this.Start + this.TokenLength;
            if (start >= this.Length) return false;

            int length = this.Length - this.TokenLength;
            RefString iterator = RefString.Pack(this.Source);
            iterator.Start = start;
            iterator.Length = length;

            for (int i = 0; i < length; i = i + 1)
            {
                char content = (iterator.Data[i]) as char;
                if (content.IsWhitespace()) continue;
                if (content.IsNumber()) return this.FindTokenNumber(start + i, iterator);

                int quote = ('\"') as int;
                if (quote == content) return this.FindTokenText(start + i, iterator);

                quote = ('{') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.OpenBracket);

                quote = ('}') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.CloseBracket);

                quote = ('[') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.OpenSquareBracket);

                quote = (']') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.CloseSquareBracket);

                quote = (',') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.Comma);

                quote = (':') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.AssigmentOperator);

                quote = ('n') as int;
                if (quote == content) return this.FindWordToken(start + i, JsonTokenKind.Null, "null", iterator);

                quote = ('t') as int;
                if (quote == content) return this.FindWordToken(start + i, JsonTokenKind.True, "true", iterator);

                quote = ('f') as int;
                if (quote == content) return this.FindWordToken(start + i, JsonTokenKind.False, "false", iterator);
            }

            return false;
        }

        private bool FindStandAloneToken(int start, int tokenKind)
        {
            this.Start = start;

            this.TokenKind =tokenKind;
            this.TokenLength = 1;

            return true;
        }

        private bool FindWordToken(int start, int tokenKind, string word, RefString iterator)
        {
            this.Start = start;
            iterator.Start = this.Start;

            int length = word.Length;
            for (int i = 0; i < length; i = i + 1)
            {
                int currentChar = iterator.Data[i];
                int expectetChar = word.Data[i];

                if (currentChar != expectetChar) return false;
                this.TokenLength = this.TokenLength + 1;
            }

            this.TokenKind = tokenKind;

            return true;
        }

        private bool FindTokenText(int start, RefString iterator)
        {
            this.Start = start;
            iterator.Start = this.Start;

            this.TokenKind = JsonTokenKind.Text;

            int length = this.Length - start;

            this.TokenLength = 1;
            for (int i = 1; i < length; i = i + 1)
            {
                this.TokenLength = this.TokenLength + 1;

                int currentChar = iterator.Data[i];

                if (currentChar == '\"') return true;
                if (currentChar != '\\') continue;

                i = i + 1;
                this.TokenLength = this.TokenLength + 1;
            }

            return false;
        }

        private bool FindTokenNumber(int start, RefString iterator)
        {
            this.Start = start;
            iterator.Start = this.Start;

            this.TokenKind = JsonTokenKind.Number;

            int length = this.Length - start;
            this.TokenLength = 0;
            for (int i = 0; i < length; i = i + 1)
            {
                char content = (iterator.Data[i]) as char;
                if (!content.IsNumber()) break;

                this.TokenLength = this.TokenLength + 1;
            }

            return true;
        }

        public RefString GetCurrent()
        {
            Result.Source = this.Source;
            Result.Start = this.Start;
            Result.Length = this.TokenLength;

            return Result;
        }

        public RefString GetCurrentTextToken()
        {
            Result.Source = this.Source;
            Result.Start = this.Start + 1;
            Result.Length = this.TokenLength - 2;

            return Result;
        }

        public char GetEscapeValue(int value)
        {
            if (value == 'n') return '\n';
            if (value == '\\') return '\\';
            if (value == '\"') return '\"';

            return ' ';
        }

        public static String GetEscapedText(RefString toEscapeString)
        {
            int length = toEscapeString.Length - 1;
            string result = string.New[length];
            int realLength = 0;

            for (int i = 1; i < length; i = i + 1)
            {
                int value = toEscapeString.Data[i];
                if (value == '\\') i = i + 1;

                result.Data[realLength] = toEscapeString.Data[i];
                realLength = realLength + 1;
            }

            result.Length = realLength;

            return new String(result);
        }

        public this ~()
        {

        }

    }

    public enum JsonTokenKind
    {
        None = 0x1,
        OpenBracket = 0x2,
        CloseBracket = 0x3,
        Comma = 0x4,
        Text = 0x5,
        Number = 0x6,
        True = 0x7,
        AssigmentOperator = 0x8
        Null = 0x9,
        False = 0xa,
        OpenSquareBracket = 0xb,
        CloseSquareBracket = 0xc,
    }

}