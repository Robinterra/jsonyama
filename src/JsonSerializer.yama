namespace "System.Text"
{
    using "System";
    using "System.Reflection";

    public static class JsonSerializer
    {

        public static bool Serialize(&Stream stream, &object instance, TypeInfo type)
        {

            JsonSerializer.Serialize_Object(stream, instance, type);

            return true;
        }

        public static JsonDeserilaizeResponse DeSerialize(RefString source, TypeInfo type)
        {

            JsonTokenizer tokenizer = JsonTokenizer.Initilize(source);
            if (!tokenizer.NextToken()) return JsonDeserilaizeResponse.Failed("failed to pick first token", tokenizer);

            return JsonSerializer.DeSerialize_Object(tokenizer, type);
        }

        #region serialize

        private static bool Serialize_Object(&Stream stream, &object instance, TypeInfo type)
        {
            stream.Write('{');

            int length = type.PropertiesCount;
            for (int i = 0; i < length; i = i + 1)
            {
                PropertyInfo info = type.Properties[i];

                JsonSerializer.Serialize_Property(stream, instance, info);
                if (length == i + 1) continue;

                stream.Write(',');
            }
            if (stream is null) return false;

            stream.Write('}');

            return true;
        }

        private static bool Serialize_ValueString(&Stream stream, &String value)
        {
            stream.Write('"');

            string content = value.Content;
            int length = content.Length;
            for (int i = 0; i < length; i = i + 1)
            {
                char currentValue = (content.Data[i]) as char;

                int sign = ('\n') as int;
                if (sign == currentValue)
                {
                    stream.Write("\\n");
                    continue;
                }

                sign = ('"') as int;
                if (sign == currentValue)
                {
                    stream.Write("\\\"");
                    continue;
                }

                sign = ('\\') as int;
                if (sign == currentValue)
                {
                    stream.Write("\\\\");
                    continue;
                }

                stream.Write(currentValue);
            }
            if (stream is null) return false;

            stream.Write('"');

            return true;
        }

        private static bool Serialize_List(&Stream stream, &List<object> liste, TypeInfo type)
        {
            stream.Write('[');

            int length = liste.Length;
            for (int i = 0; i < length; i = i + 1)
            {
                &object item = liste.Get(i);
                if (item is null) continue;

                JsonSerializer.Serialize_Object(stream, item, type);

                if (length == i + 1) continue;
                stream.Write(',');
            }
            if (stream is null) return false;

            stream.Write(']');
        }

        private static bool Serialize_Int(&Stream stream, int value)
        {
            int length = 1;
            int number = value + 0;

            stream.Write(0x30 as char);
            stream.Write(0x78 as char);

            for (int count = 0; count != 8; count = count + 1)
            {
                int sheep = count << 2;
                int current = number >> sheep;

                if (current is null) break;
                if (count is null) continue;
                length = length + 1;
            }
            if (stream is null) return false;

            for (int i = 0; length != 0; i = i + 1)
            {
                length = length - 1;

                int sheep = length << 2;
                int current = number >> sheep;

                int adder = 0x30;
                int segment = current & 0xf;
                if (segment > 9) adder = 0x57;
                char currentSign = (adder + segment) as char;
                stream.Write(currentSign);
            }

            return true;
        }

        private static bool Serialize_Property(&Stream stream, &object instance, PropertyInfo info)
        {
            stream.Write('"');
            stream.Write(info.Name);
            stream.Write("\":");

            int propType = info.TypeArt;
            int value = info.GetValue(instance);
            if (propType == TypeArten.Object)
            {
                &object valueObj = (value) as object;
                return JsonSerializer.Serialize_Object(stream, valueObj, info.Type);
            }

            if (propType == TypeArten.List)
            {
                &List<object> valueList = (value) as List;
                return JsonSerializer.Serialize_List(stream, valueList, info.Type);
            }

            if (propType == TypeArten.Int) return JsonSerializer.Serialize_Int(stream, value);

            if (propType == TypeArten.Bool)
            {
                bool valueBool = (value) as bool;
                if (valueBool) return stream.Write("true");
                return stream.Write("false");
            }

            if (propType == TypeArten.String)
            {
                &String valueStr = (value) as String;
                return JsonSerializer.Serialize_ValueString(stream, valueStr);
            }

            return true;
        }

        #endregion serialize

        #region deserialize

        private static JsonDeserilaizeResponse DeSerialize_Object(JsonTokenizer tokenizer, TypeInfo type)
        {
            if (tokenizer.TokenKind == JsonTokenKind.Null) return JsonDeserilaizeResponse.Ok(null);
            if (tokenizer.TokenKind != JsonTokenKind.OpenBracket) return JsonDeserilaizeResponse.Failed("Expectet a '{' Token", tokenizer);

            object result = type.GetNewInstance();

            while (tokenizer.NextToken())
            {
                if (tokenizer.TokenKind == JsonTokenKind.Comma) continue;
                if (tokenizer.TokenKind == JsonTokenKind.CloseBracket) return JsonDeserilaizeResponse.Ok(result);
                if (tokenizer.TokenKind != JsonTokenKind.Text) return JsonDeserilaizeResponse.Failed("Expectet a Text Token", tokenizer);

                bool isok = JsonSerializer.DeSerialize_Property(tokenizer, result, type);
                if (!isok) return JsonDeserilaizeResponse.Failed("Property Value can not be Parsed", tokenizer);
            }

            return JsonDeserilaizeResponse.Ok(result);
        }

        private static object? DeSerialize_List(JsonTokenizer tokenizer, TypeInfo type)
        {
            JsonDeserilaizeResponse response = JsonDeserilaizeResponse.Init();

            if (tokenizer.TokenKind == JsonTokenKind.Null) return null;
            if (tokenizer.TokenKind != JsonTokenKind.OpenSquareBracket) return null;

            List<object> result = new List<object>();

            while (tokenizer.NextToken())
            {
                if (tokenizer.TokenKind == JsonTokenKind.Comma) continue;
                if (tokenizer.TokenKind == JsonTokenKind.CloseSquareBracket) return result;

                response = JsonSerializer.DeSerialize_Object(tokenizer, type);
                if (!response.IsSuccess) return null;

                object item = response.Result;
                result.Add(item);
            }

            return result;
        }

        private static bool IsValueCorrectType(int propType, int tokenKind)
        {
            if (propType == TypeArten.Int) return tokenKind == JsonTokenKind.Number;
            if (propType == TypeArten.String) return tokenKind == JsonTokenKind.Text;
            if (propType == TypeArten.Object) return tokenKind == JsonTokenKind.OpenBracket;
            if (propType == TypeArten.Bool)
            {
                if (tokenKind == JsonTokenKind.False) return true;
                return tokenKind == JsonTokenKind.True;
            }
            if (propType == TypeArten.List) return tokenKind == JsonTokenKind.OpenSquareBracket;

            return false;
        }

        private static bool DeSerialize_Property(JsonTokenizer tokenizer, &object instance, TypeInfo type)
        {
            JsonDeserilaizeResponse response = JsonDeserilaizeResponse.Init();
            if (tokenizer.TokenKind != JsonTokenKind.Text) return false;

            RefString propName = tokenizer.GetCurrentTextToken();

            PropertyInfo propInfo = type.Find(propName);
            if (propInfo is null) return true;

            if (!tokenizer.NextToken()) return false;
            if (tokenizer.TokenKind != JsonTokenKind.AssigmentOperator) return false;
            if (!tokenizer.NextToken()) return false;

            bool isok = JsonSerializer.IsValueCorrectType(propInfo.TypeArt, tokenizer.TokenKind);
            if (!isok) return false;

            int propType = propInfo.TypeArt;
            RefString inputToken = tokenizer.GetCurrent();

            response = JsonDeserilaizeResponse.Ok(null);
            if (propType == TypeArten.Object)
            {
                response = JsonSerializer.DeSerialize_Object(tokenizer, propInfo.Type);
                if (!response.IsSuccess) return false;

                int data = (response.GetResult()) as int;

                return propInfo.SetValue(instance, data);
            }

            if (propType == TypeArten.List)
            {
                int data = (JsonSerializer.DeSerialize_List(tokenizer, propInfo.Type)) as int;
                return propInfo.SetValue(instance, data);
            }

            if (propType == TypeArten.Int) return JsonSerializer.SetPropertyWithInt(instance, inputToken, propInfo);
            if (propType == TypeArten.Bool)
            {
                if (tokenizer.TokenKind == JsonTokenKind.True) return propInfo.SetValue(instance, true as int);
                if (tokenizer.TokenKind == JsonTokenKind.False) return propInfo.SetValue(instance, false as int);
            }

            if (propType == TypeArten.String) return JsonSerializer.SetPropertyWithString(instance, inputToken, propInfo);

            return false;
        }

        private static bool SetPropertyWithInt(&object instance, RefString inputZahl, PropertyInfo propInfo)
        {
            IntParseResult parseResult = int.Parse(inputZahl);
            if (!parseResult.IsSuccess) return false;

            propInfo.SetValue(instance, parseResult.Result);

            return true;
        }

        private static bool SetPropertyWithString(&object instance, RefString inputText, PropertyInfo propInfo)
        {
            int dataResult = (JsonTokenizer.GetEscapedText(inputText)) as int;

            propInfo.SetValue(instance, dataResult as int);

            return true;
        }

        #endregion deserialize

    }

    public struct JsonTokenizer
    {

        #region vars

        public int Start;
        public int Length;
        public int TokenLength;
        public string Source;
        public int Line;
        public int Column;

        public int TokenKind;

        #endregion vars

        public static JsonTokenizer Initilize(RefString source)
        {
            Result.Source = source.Source;
            Result.Start = source.Start;
            Result.Length = source.Length;
            Result.TokenLength = 0;
            Result.TokenKind = JsonTokenKind.None;
            Result.Line = 1;

            return Result;
        }

        public bool NextToken()
        {
            int start = this.Start + this.TokenLength;
            if (start >= this.Length) return false;

            int length = this.Length - this.TokenLength;
            RefString iterator = RefString.Pack(this.Source);
            iterator.Start = start;
            iterator.Length = length;

            for (int i = 0; i < length; i = i + 1)
            {
                char content = (iterator.Data[i]) as char;

                int lineBreak = ('\n') as int;
                if (lineBreak == content)
                {
                    this.Line = this.Line + 1;
                    this.Column = 0;
                }
                if (content.IsWhitespace()) continue;
                if (content.IsNumber()) return this.FindTokenNumber(start + i, iterator);

                int quote = ('\"') as int;
                if (quote == content) return this.FindTokenText(start + i, iterator);

                quote = ('{') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.OpenBracket);

                quote = ('}') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.CloseBracket);

                quote = ('[') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.OpenSquareBracket);

                quote = (']') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.CloseSquareBracket);

                quote = (',') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.Comma);

                quote = (':') as int;
                if (quote == content) return this.FindStandAloneToken(start + i, JsonTokenKind.AssigmentOperator);

                quote = ('n') as int;
                if (quote == content) return this.FindWordToken(start + i, JsonTokenKind.Null, "null", iterator);

                quote = ('t') as int;
                if (quote == content) return this.FindWordToken(start + i, JsonTokenKind.True, "true", iterator);

                quote = ('f') as int;
                if (quote == content) return this.FindWordToken(start + i, JsonTokenKind.False, "false", iterator);

                return this.FindStandAloneToken(start + i, JsonTokenKind.Error);
            }

            return false;
        }

        private bool FindStandAloneToken(int start, int tokenKind)
        {
            this.Start = start;

            this.TokenKind =tokenKind;
            this.TokenLength = 1;

            this.Column = this.Column + 1;

            return true;
        }

        private bool FindWordToken(int start, int tokenKind, string word, RefString iterator)
        {
            this.Start = start;
            iterator.Start = this.Start;

            int length = word.Length;
            for (int i = 0; i < length; i = i + 1)
            {
                int currentChar = iterator.Data[i];
                int expectetChar = word.Data[i];

                if (currentChar != expectetChar) return false;
                this.TokenLength = this.TokenLength + 1;
            }

            this.Column = this.Column + length;

            this.TokenKind = tokenKind;

            return true;
        }

        private bool FindTokenText(int start, RefString iterator)
        {
            this.Start = start;
            iterator.Start = this.Start;

            this.TokenKind = JsonTokenKind.Text;

            int length = this.Length - start;

            this.TokenLength = 1;
            for (int i = 1; i < length; i = i + 1)
            {
                this.TokenLength = this.TokenLength + 1;

                int currentChar = iterator.Data[i];

                if (currentChar == '\"') return true;
                if (currentChar != '\\') continue;

                i = i + 1;
                this.TokenLength = this.TokenLength + 1;
            }

            return false;
        }

        private bool FindTokenNumber(int start, RefString iterator)
        {
            this.Start = start;
            iterator.Start = this.Start;

            this.TokenKind = JsonTokenKind.Number;

            int length = this.Length - start;
            this.TokenLength = 0;
            for (int i = 0; i < length; i = i + 1)
            {
                char content = (iterator.Data[i]) as char;

                bool isok = content.IsNumber();
                if (!isok) isok = 0x78 == content;
                if (!isok)
                {
                    if (0x61 > content) break;
                    if (0x66 < content) break;
                }

                this.TokenLength = this.TokenLength + 1;
            }

            this.Column = this.Column + this.TokenLength;

            return true;
        }

        public RefString GetCurrent()
        {
            Result.Source = this.Source;
            Result.Start = this.Start;
            Result.Length = this.TokenLength;

            return Result;
        }

        public RefString GetCurrentTextToken()
        {
            Result.Source = this.Source;
            Result.Start = this.Start + 1;
            Result.Length = this.TokenLength - 2;

            return Result;
        }

        public char GetEscapeValue(int value)
        {
            if (value == 'n') return '\n';
            if (value == '\\') return '\\';
            if (value == '\"') return '\"';

            return ' ';
        }

        public static String GetEscapedText(RefString toEscapeString)
        {
            int length = toEscapeString.Length - 1;
            string result = string.New[length];
            int realLength = 0;

            for (int i = 1; i < length; i = i + 1)
            {
                int value = toEscapeString.Data[i];
                if (value == '\\') i = i + 1;

                result.Data[realLength] = toEscapeString.Data[i];
                realLength = realLength + 1;
            }

            result.Length = realLength;

            return new String(result);
        }

        public this ~()
        {

        }

    }

    public struct JsonDeserilaizeResponse
    {

        #region vars

        public object Result;

        public bool IsSuccess;

        public string Message;

        public int Line;

        public int Column;

        #endregion vars

        #region ctor

        public this ~()
        {

        }

        #endregion ctor

        #region methods

        public object? GetResult()
        {
            object res = this.Result;

            return res;
        }

        public static JsonDeserilaizeResponse Init()
        {
            Result.Result = (null) as object;

            return Result;
        }

        public static JsonDeserilaizeResponse Ok(object result?)
        {
            Result.Result = result;
            Result.IsSuccess = true;

            return Result;
        }

        public static JsonDeserilaizeResponse Failed(string msg, JsonTokenizer tokenizer)
        {
            Result.IsSuccess = false;
            Result.Message = msg;
            Result.Line = tokenizer.Line;
            Result.Column = tokenizer.Column;
            Result.Result = (null) as object;

            return Result;
        }

        #endregion methods
    }

    public enum JsonTokenKind
    {
        None = 0x1,
        OpenBracket = 0x2,
        CloseBracket = 0x3,
        Comma = 0x4,
        Text = 0x5,
        Number = 0x6,
        True = 0x7,
        AssigmentOperator = 0x8
        Null = 0x9,
        False = 0xa,
        OpenSquareBracket = 0xb,
        CloseSquareBracket = 0xc,
        Error = 0xd,
    }

}